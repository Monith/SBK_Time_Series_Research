#################
### functions ###
#################
generate.nlar=function(d, n, errsd)
{
  if(errsd=="opt")
    sd=1
  else if(errsd=="half")
    sd=0.5
  else if(errsd=="twice")
    sd=2
  nextra=2*d
  nn = n+nextra
  x = rnorm(nn, mean=0, sd=sd)
  x = 2.5*(pnorm(x)-0.5)
  m = matrix(nrow = nn, ncol = d)
  for(i in (nextra+1):nn)
  {
    for(j in 1:d)
    {
      m[i,j] = sin(pi/2.5*x[i-j]+j/d*pi)
      x[i] = sum(m[i,]) + rnorm(1)
    }
  }
  m = m[(nextra+1):nn,]
  y = x[(nextra+1):nn] 
  xtemp = matrix(nrow=n, ncol = d)
  for(j in 1:d)
    xtemp[,j] = x[(nextra+1-j):(nn-j)]
  return(list(y=y, m=m, x=xtemp))
}

basis=function(x, degree, i, knots)
{ 
  if(degree==0)
  { 
    if((x<knots[i+1])&(x>=knots[i])) y=1 
    else 
      y=0
  }else{
    if((knots[degree+i]-knots[i])==0) {
      temp1=0
    } else {
      temp1=(x-knots[i])/(knots[degree+i]-knots[i])
    };
    if((knots[i+degree+1]-knots[i+1])==0) 
    {
      temp2=0
    } else {
      temp2=(knots[i+degree+1]-x)/(knots[i+degree+1]-knots[i+1])
    }
    y= temp1*basis(x, (degree-1), i, knots) +temp2*basis(x, (degree-1),(i+1), knots)
  }
  return(y)
}

bspline=function(x, degree, inner.knots, Boundary.knots) 
{
  Boundary.knots=sort(Boundary.knots);
  x = as.matrix(x)
  knots=c(rep(Boundary.knots[1], (degree+1)), sort(inner.knots),
          rep(Boundary.knots[2], (degree+1)));
  np=degree+length(inner.knots)+1
  s=matrix(nrow = nrow(x), ncol = np)
  for(j in 1:nrow(x))
  {
    if(x[j]==Boundary.knots[2]) 
    {
      s[j,np]=1
      s[j,-np] = 0
    } else {
      for( i in 1: np)
        s[j,i]=basis(x[j], degree, i, knots)
    }
  }
  return(s)
}

backfit=function(x.mat, y, degree, nknots)
{
  library(corpcor)
  n=nrow(x.mat)
  d=ncol(x.mat)
  if(nknots=="opt")
    N=min(round((n^(2/5))*log(n))+1, round((n/4-1)*d^-1))
  else if(nknots=="half")
    N=(min(round((n^(2/5))*log(n))+1, round((n/4-1)*d^-1)))/2
  else if(nknots=="twice")
    N=(min(round((n^(2/5))*log(n))+1, round((n/4-1)*d^-1)))*2
  else
    N=nknots
  y.mat=matrix(NA, nrow=n, ncol=d)
  for(i in 1:d)
  {
    x=x.mat[ ,i]
    knots = seq(min(x),max(x),length = N+2)
    inner.knots = knots[c(-1,-(N+2))]
    Boundary.knots = knots[c(1,(N+2))]
    B = bspline(x, degree, inner.knots, Boundary.knots)
    b.hat = pseudoinverse(t(B)%*%B)%*%t(B)%*%y
    f.hat = B%*%b.hat
    #plot(x, f.hat, col = "red", xlim=c(min(x)*1.1,max(x)*1.1), ylim=c(min(y)*1.1,max(y)*1.1), main=paste("backfit spline y against x", i, sep=""))
    #points(x,y,col="grey")
    y.mat[ ,i]=f.hat
  }
  return(y.mat)
}

kernel=function(x.mat, y.mat, y, bw)
{
  library(KernSmooth)
  n=nrow(x.mat)
  d=ncol(x.mat)
  km=matrix(NA, nrow=n, ncol=d)
  if(bw=="opt")
    bwu=1.06*sd(x.mat)*n^(-1/5)
  else if(bw=="half")
    bwu=(1.06*sd(x.mat)*n^(-1/5))/2
  else if(bw=="twice")
    bwu=(1.06*sd(x.mat)*n^(-1/5))*2
  else
    bwu=bw
  
  if(d<=2)
  {
    for(i in 1:d)
    {
      y.pseudo = y - y.mat[ ,(-i)]
      x=x.mat[ ,i]
      m=ksmooth(x, y.pseudo, kernel = "normal", bandwidth=bwu, x.points = x)
      #plot(x, y.pseudo, main=paste("fit kernel pseudo y",i," against x",i, sep=""))
      #lines(m$x, m$y, lwd=3)
      km[ ,i]=m$y
    }
  }
  else
  {
    for(i in 1:d)
    {
      y.pseudo = y - rowSums(y.mat[ ,(-i)])
      x=x.mat[ ,i]
      m=ksmooth(x, y.pseudo, kernel = "normal", bandwidth=bwu, x.points = x)
      #plot(x, y.pseudo, main=paste("fit kernel pseudo y",i," against x",i, sep=""))
      #lines(m$x, m$y, lwd=3)
      km[ ,i]=m$y
    }
  }
  
  return(km)
}

SBK = function(y, x, bw, nknots, degree)
{
  n=nrow(x)
  d=ncol(x)
  y.mat=backfit(x,y, degree=degree, nknots=nknots)
  m.hat = kernel(x, y.mat, y, bw=bw)
  rmse = sqrt(mean((rowSums(m.hat) - y)^2))
  return(list(m.hat=m.hat, rmse=rmse))
}

efficiency = function(m.tilde, result, m, x)
{
  n = nrow(m)
  d = ncol(m)
  eff = rep(NA, 3)
  for(i in 1:d){
    eff[i] = sqrt(((sum((m.tilde[,i]-m[,i])^2)) /
                (sum((result[,i]-m[,i])^2))))
  }
  return(eff)
}

####################
##### examples #####
####################
# l = 500
# d = 3
# eff.mat = matrix(NA, nrow=l, ncol=d)
# for(k in 1:l){
#   data = generate(n=100, d)
#   y=data$y
#   x=data$x
#   m=data$m
#   
#   result = SBK(y=y, x=x, bw=0.25, nknots=5, degree=1)
#   
#   m.tilde = kernel(x.mat=x, y.mat=m, y=y, bw=.025)
#   
#   eff.mat[k,] = efficiency(m.tilde, result, m)
# }

##############
#Efficiency for Time Series
##############
n = 100
d = 3
l = 500
d = 3

eff.mat.time = matrix(NA, nrow=l, ncol=d)
for(k in 1:l){
  
  data <- generate.nlar(n = n, d = d, errsd = "opt" )
  y=data$y
  x=data$x
  m=data$m
  
  result <-SBK(y=y, x=x, bw="opt", nknots=min(round((n^(2/5))*log(n))+1, 
                                              round((n/4-1)*d^-1)), degree=1)
  
  m.tilde = kernel(x.mat=x, y.mat=m, y=y, bw=.25)
  
  eff.mat.time[k,] = efficiency(m.tilde, result[[1]], m,x)
}

plot(density(eff.mat.time[,1], bw=.25, na.rm=TRUE, from = 0),xlim = c(0,3))

l = 500
d = c(4,10)
n = c(100, 200, 500, 1000)
eff.mat1.time = matrix(NA, nrow=l, ncol=length(n))
eff.mat4.time = matrix(NA, nrow=l, ncol=length(n))

for(h in 1:length(d)){
  for(g in 1:length(n)){
    
    eff.mat.time = matrix(NA, nrow=l, ncol=d[h])
    
    for(k in 1:l){
      
      data <- generate.nlar(n = n[g], d = d[h], errsd = "opt" )
      y=data$y
      x=data$x
      m=data$m
      
      result <-SBK(y=y, x=x, bw="opt", nknots=min(round((n^(2/5))*log(n))+1, 
                                                  round((n/4-1)*d^-1)), degree=1)
      
      m.tilde = kernel(x.mat=x, y.mat=m, y=y, bw=.25)
      
      eff.mat.time[k,] = efficiency(m.tilde, result[[1]], m,x)
      cat(k, "\r")
    }
    eff.mat1.time[,g] = eff.mat.time[,1]
    eff.mat4.time[,g] = eff.mat.time[,4]
    
  }
  val = d[h]
  
  x11()
  plot(density(eff.mat1.time[,1], bw=1.06*sd(eff.mat1.time[,1])*l^(-1/5), na.rm=TRUE, from = 0, to = 3), 
       ylim = c(0,6), col="orange", main=bquote("Time Series Efficiency of 1st Estimator, d = " ~ .(val)))
  lines(density(eff.mat1.time[,2], bw=1.06*sd(eff.mat1.time[,2])*l^(-1/5), na.rm=TRUE, from = 0, to = 3), ylim = c(0,6), col = "green")
  lines(density(eff.mat1.time[,3], bw=1.06*sd(eff.mat1.time[,3])*l^(-1/5), na.rm=TRUE, from = 0, to = 3), ylim = c(0,6), col = "red")
  lines(density(eff.mat1.time[,4], bw=1.06*sd(eff.mat1.time[,4])*l^(-1/5), na.rm=TRUE, from = 0, to = 3), ylim = c(0,6), col = "black", lwd=3.0)
  abline(v=1, col = "blue")
  legend(2,3, c("n = 100","n = 200", "n = 500", "n = 1000"), lty=c(1,1), lwd=c(2.5,2.5,2.5,3.0) ,col=c("orange","green","red","black"))
  
  x11()
  plot(density(eff.mat4.time[,1], bw=1.06*sd(eff.mat4.time[,1])*l^(-1/5), na.rm=TRUE, from = 0, to = 3), 
       ylim = c(0,6), col="orange", main=bquote("Time Series Efficiency of 4th Estimator, d = " ~ .(val)))
  lines(density(eff.mat4.time[,2], bw=1.06*sd(eff.mat4.time[,2])*l^(-1/5), na.rm=TRUE, from = 0, to = 3), ylim = c(0,6), col = "green")
  lines(density(eff.mat4.time[,3], bw=1.06*sd(eff.mat4.time[,3])*l^(-1/5), na.rm=TRUE, from = 0, to = 3), ylim = c(0,6), col = "red")
  lines(density(eff.mat4.time[,4], bw=1.06*sd(eff.mat4.time[,4])*l^(-1/5), na.rm=TRUE, from = 0, to = 3), ylim = c(0,6), col = "black", lwd=3.0)
  abline(v=1, col = "blue")
  legend(2,3, c("n = 100","n = 200", "n = 500", "n = 1000"), lty=c(1,1), lwd=c(2.5,2.5,2.5,3.0) ,col=c("orange","green","red","black"))
  
  #1st Estimator
  d[h]
  for (t in 1:4){
    cat(n[t],
        mean(eff.mat1.time[,t]),
        sd(eff.mat1.time[,t]), "\n")
  }
  #4th Estimator
  d[h]
  for (t in 1:4){
    cat(n[t],
        mean(eff.mat4.time[,t]), 
        sd(eff.mat4.time[,t]), "\n" )
  }
}


